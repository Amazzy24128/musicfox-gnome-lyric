/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MUSIC_INFO_SERVICE_GENERATED_H__
#define __MUSIC_INFO_SERVICE_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.amazzy24128.MusicInfoService.Player */

#define TYPE_MUSIC_INFO_SERVICE_PLAYER (music_info_service_player_get_type ())
#define MUSIC_INFO_SERVICE_PLAYER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER, MusicInfoServicePlayer))
#define IS_MUSIC_INFO_SERVICE_PLAYER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER))
#define MUSIC_INFO_SERVICE_PLAYER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER, MusicInfoServicePlayerIface))

struct _MusicInfoServicePlayer;
typedef struct _MusicInfoServicePlayer MusicInfoServicePlayer;
typedef struct _MusicInfoServicePlayerIface MusicInfoServicePlayerIface;

struct _MusicInfoServicePlayerIface
{
  GTypeInterface parent_iface;


  const gchar * (*get_artist) (MusicInfoServicePlayer *object);

  const gchar * (*get_current_lyric) (MusicInfoServicePlayer *object);

  gdouble  (*get_duration) (MusicInfoServicePlayer *object);

  gboolean  (*get_is_playing) (MusicInfoServicePlayer *object);

  gdouble  (*get_position) (MusicInfoServicePlayer *object);

  const gchar * (*get_title) (MusicInfoServicePlayer *object);

  void (*state_changed) (
    MusicInfoServicePlayer *object,
    const gchar *arg_artist,
    const gchar *arg_title,
    gboolean arg_is_playing,
    const gchar *arg_current_lyric,
    gdouble arg_duration,
    gdouble arg_position);

};

GType music_info_service_player_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *music_info_service_player_interface_info (void);
guint music_info_service_player_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void music_info_service_player_emit_state_changed (
    MusicInfoServicePlayer *object,
    const gchar *arg_artist,
    const gchar *arg_title,
    gboolean arg_is_playing,
    const gchar *arg_current_lyric,
    gdouble arg_duration,
    gdouble arg_position);



/* D-Bus property accessors: */
const gchar *music_info_service_player_get_artist (MusicInfoServicePlayer *object);
gchar *music_info_service_player_dup_artist (MusicInfoServicePlayer *object);
void music_info_service_player_set_artist (MusicInfoServicePlayer *object, const gchar *value);

const gchar *music_info_service_player_get_title (MusicInfoServicePlayer *object);
gchar *music_info_service_player_dup_title (MusicInfoServicePlayer *object);
void music_info_service_player_set_title (MusicInfoServicePlayer *object, const gchar *value);

gboolean music_info_service_player_get_is_playing (MusicInfoServicePlayer *object);
void music_info_service_player_set_is_playing (MusicInfoServicePlayer *object, gboolean value);

const gchar *music_info_service_player_get_current_lyric (MusicInfoServicePlayer *object);
gchar *music_info_service_player_dup_current_lyric (MusicInfoServicePlayer *object);
void music_info_service_player_set_current_lyric (MusicInfoServicePlayer *object, const gchar *value);

gdouble music_info_service_player_get_duration (MusicInfoServicePlayer *object);
void music_info_service_player_set_duration (MusicInfoServicePlayer *object, gdouble value);

gdouble music_info_service_player_get_position (MusicInfoServicePlayer *object);
void music_info_service_player_set_position (MusicInfoServicePlayer *object, gdouble value);


/* ---- */

#define TYPE_MUSIC_INFO_SERVICE_PLAYER_PROXY (music_info_service_player_proxy_get_type ())
#define MUSIC_INFO_SERVICE_PLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER_PROXY, MusicInfoServicePlayerProxy))
#define MUSIC_INFO_SERVICE_PLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MUSIC_INFO_SERVICE_PLAYER_PROXY, MusicInfoServicePlayerProxyClass))
#define MUSIC_INFO_SERVICE_PLAYER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER_PROXY, MusicInfoServicePlayerProxyClass))
#define IS_MUSIC_INFO_SERVICE_PLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER_PROXY))
#define IS_MUSIC_INFO_SERVICE_PLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MUSIC_INFO_SERVICE_PLAYER_PROXY))

typedef struct _MusicInfoServicePlayerProxy MusicInfoServicePlayerProxy;
typedef struct _MusicInfoServicePlayerProxyClass MusicInfoServicePlayerProxyClass;
typedef struct _MusicInfoServicePlayerProxyPrivate MusicInfoServicePlayerProxyPrivate;

struct _MusicInfoServicePlayerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MusicInfoServicePlayerProxyPrivate *priv;
};

struct _MusicInfoServicePlayerProxyClass
{
  GDBusProxyClass parent_class;
};

GType music_info_service_player_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MusicInfoServicePlayerProxy, g_object_unref)
#endif

void music_info_service_player_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MusicInfoServicePlayer *music_info_service_player_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MusicInfoServicePlayer *music_info_service_player_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void music_info_service_player_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MusicInfoServicePlayer *music_info_service_player_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MusicInfoServicePlayer *music_info_service_player_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MUSIC_INFO_SERVICE_PLAYER_SKELETON (music_info_service_player_skeleton_get_type ())
#define MUSIC_INFO_SERVICE_PLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER_SKELETON, MusicInfoServicePlayerSkeleton))
#define MUSIC_INFO_SERVICE_PLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MUSIC_INFO_SERVICE_PLAYER_SKELETON, MusicInfoServicePlayerSkeletonClass))
#define MUSIC_INFO_SERVICE_PLAYER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER_SKELETON, MusicInfoServicePlayerSkeletonClass))
#define IS_MUSIC_INFO_SERVICE_PLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MUSIC_INFO_SERVICE_PLAYER_SKELETON))
#define IS_MUSIC_INFO_SERVICE_PLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MUSIC_INFO_SERVICE_PLAYER_SKELETON))

typedef struct _MusicInfoServicePlayerSkeleton MusicInfoServicePlayerSkeleton;
typedef struct _MusicInfoServicePlayerSkeletonClass MusicInfoServicePlayerSkeletonClass;
typedef struct _MusicInfoServicePlayerSkeletonPrivate MusicInfoServicePlayerSkeletonPrivate;

struct _MusicInfoServicePlayerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MusicInfoServicePlayerSkeletonPrivate *priv;
};

struct _MusicInfoServicePlayerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType music_info_service_player_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MusicInfoServicePlayerSkeleton, g_object_unref)
#endif

MusicInfoServicePlayer *music_info_service_player_skeleton_new (void);


G_END_DECLS

#endif /* __MUSIC_INFO_SERVICE_GENERATED_H__ */
